// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: social_graph.proto

package socialproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocialGraphClient is the client API for SocialGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialGraphClient interface {
	InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*InsertUserResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetFollowees(ctx context.Context, in *GetFolloweesRequest, opts ...grpc.CallOption) (*GetFolloweesResponse, error)
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	FollowMany(ctx context.Context, in *FollowManyRequest, opts ...grpc.CallOption) (*FollowManyResponse, error)
}

type socialGraphClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialGraphClient(cc grpc.ClientConnInterface) SocialGraphClient {
	return &socialGraphClient{cc}
}

func (c *socialGraphClient) InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*InsertUserResponse, error) {
	out := new(InsertUserResponse)
	err := c.cc.Invoke(ctx, "/socialproto.SocialGraph/InsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, "/socialproto.SocialGraph/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphClient) GetFollowees(ctx context.Context, in *GetFolloweesRequest, opts ...grpc.CallOption) (*GetFolloweesResponse, error) {
	out := new(GetFolloweesResponse)
	err := c.cc.Invoke(ctx, "/socialproto.SocialGraph/GetFollowees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, "/socialproto.SocialGraph/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphClient) FollowMany(ctx context.Context, in *FollowManyRequest, opts ...grpc.CallOption) (*FollowManyResponse, error) {
	out := new(FollowManyResponse)
	err := c.cc.Invoke(ctx, "/socialproto.SocialGraph/FollowMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialGraphServer is the server API for SocialGraph service.
// All implementations must embed UnimplementedSocialGraphServer
// for forward compatibility
type SocialGraphServer interface {
	InsertUser(context.Context, *InsertUserRequest) (*InsertUserResponse, error)
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	GetFollowees(context.Context, *GetFolloweesRequest) (*GetFolloweesResponse, error)
	Follow(context.Context, *FollowRequest) (*FollowResponse, error)
	FollowMany(context.Context, *FollowManyRequest) (*FollowManyResponse, error)
	mustEmbedUnimplementedSocialGraphServer()
}

// UnimplementedSocialGraphServer must be embedded to have forward compatible implementations.
type UnimplementedSocialGraphServer struct {
}

func (UnimplementedSocialGraphServer) InsertUser(context.Context, *InsertUserRequest) (*InsertUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}
func (UnimplementedSocialGraphServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedSocialGraphServer) GetFollowees(context.Context, *GetFolloweesRequest) (*GetFolloweesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowees not implemented")
}
func (UnimplementedSocialGraphServer) Follow(context.Context, *FollowRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedSocialGraphServer) FollowMany(context.Context, *FollowManyRequest) (*FollowManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowMany not implemented")
}
func (UnimplementedSocialGraphServer) mustEmbedUnimplementedSocialGraphServer() {}

// UnsafeSocialGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialGraphServer will
// result in compilation errors.
type UnsafeSocialGraphServer interface {
	mustEmbedUnimplementedSocialGraphServer()
}

func RegisterSocialGraphServer(s grpc.ServiceRegistrar, srv SocialGraphServer) {
	s.RegisterService(&SocialGraph_ServiceDesc, srv)
}

func _SocialGraph_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.SocialGraph/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServer).InsertUser(ctx, req.(*InsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraph_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.SocialGraph/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraph_GetFollowees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolloweesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServer).GetFollowees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.SocialGraph/GetFollowees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServer).GetFollowees(ctx, req.(*GetFolloweesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraph_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.SocialGraph/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraph_FollowMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServer).FollowMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.SocialGraph/FollowMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServer).FollowMany(ctx, req.(*FollowManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialGraph_ServiceDesc is the grpc.ServiceDesc for SocialGraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialGraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "socialproto.SocialGraph",
	HandlerType: (*SocialGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertUser",
			Handler:    _SocialGraph_InsertUser_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _SocialGraph_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowees",
			Handler:    _SocialGraph_GetFollowees_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _SocialGraph_Follow_Handler,
		},
		{
			MethodName: "FollowMany",
			Handler:    _SocialGraph_FollowMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social_graph.proto",
}
