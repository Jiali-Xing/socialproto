// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: nginx.proto

package socialproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NginxServiceClient is the client API for NginxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NginxServiceClient interface {
	ForwardComposePost(ctx context.Context, in *ComposePostRequest, opts ...grpc.CallOption) (*ComposePostResponse, error)
	ForwardUserTimeline(ctx context.Context, in *ReadUserTimelineRequest, opts ...grpc.CallOption) (*ReadUserTimelineResponse, error)
	ForwardHomeTimeline(ctx context.Context, in *ReadHomeTimelineRequest, opts ...grpc.CallOption) (*ReadHomeTimelineResponse, error)
}

type nginxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNginxServiceClient(cc grpc.ClientConnInterface) NginxServiceClient {
	return &nginxServiceClient{cc}
}

func (c *nginxServiceClient) ForwardComposePost(ctx context.Context, in *ComposePostRequest, opts ...grpc.CallOption) (*ComposePostResponse, error) {
	out := new(ComposePostResponse)
	err := c.cc.Invoke(ctx, "/socialproto.NginxService/ForwardComposePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxServiceClient) ForwardUserTimeline(ctx context.Context, in *ReadUserTimelineRequest, opts ...grpc.CallOption) (*ReadUserTimelineResponse, error) {
	out := new(ReadUserTimelineResponse)
	err := c.cc.Invoke(ctx, "/socialproto.NginxService/ForwardUserTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxServiceClient) ForwardHomeTimeline(ctx context.Context, in *ReadHomeTimelineRequest, opts ...grpc.CallOption) (*ReadHomeTimelineResponse, error) {
	out := new(ReadHomeTimelineResponse)
	err := c.cc.Invoke(ctx, "/socialproto.NginxService/ForwardHomeTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NginxServiceServer is the server API for NginxService service.
// All implementations must embed UnimplementedNginxServiceServer
// for forward compatibility
type NginxServiceServer interface {
	ForwardComposePost(context.Context, *ComposePostRequest) (*ComposePostResponse, error)
	ForwardUserTimeline(context.Context, *ReadUserTimelineRequest) (*ReadUserTimelineResponse, error)
	ForwardHomeTimeline(context.Context, *ReadHomeTimelineRequest) (*ReadHomeTimelineResponse, error)
	mustEmbedUnimplementedNginxServiceServer()
}

// UnimplementedNginxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNginxServiceServer struct {
}

func (UnimplementedNginxServiceServer) ForwardComposePost(context.Context, *ComposePostRequest) (*ComposePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardComposePost not implemented")
}
func (UnimplementedNginxServiceServer) ForwardUserTimeline(context.Context, *ReadUserTimelineRequest) (*ReadUserTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardUserTimeline not implemented")
}
func (UnimplementedNginxServiceServer) ForwardHomeTimeline(context.Context, *ReadHomeTimelineRequest) (*ReadHomeTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardHomeTimeline not implemented")
}
func (UnimplementedNginxServiceServer) mustEmbedUnimplementedNginxServiceServer() {}

// UnsafeNginxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NginxServiceServer will
// result in compilation errors.
type UnsafeNginxServiceServer interface {
	mustEmbedUnimplementedNginxServiceServer()
}

func RegisterNginxServiceServer(s grpc.ServiceRegistrar, srv NginxServiceServer) {
	s.RegisterService(&NginxService_ServiceDesc, srv)
}

func _NginxService_ForwardComposePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxServiceServer).ForwardComposePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.NginxService/ForwardComposePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxServiceServer).ForwardComposePost(ctx, req.(*ComposePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxService_ForwardUserTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxServiceServer).ForwardUserTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.NginxService/ForwardUserTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxServiceServer).ForwardUserTimeline(ctx, req.(*ReadUserTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxService_ForwardHomeTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHomeTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxServiceServer).ForwardHomeTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.NginxService/ForwardHomeTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxServiceServer).ForwardHomeTimeline(ctx, req.(*ReadHomeTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NginxService_ServiceDesc is the grpc.ServiceDesc for NginxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NginxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "socialproto.NginxService",
	HandlerType: (*NginxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardComposePost",
			Handler:    _NginxService_ForwardComposePost_Handler,
		},
		{
			MethodName: "ForwardUserTimeline",
			Handler:    _NginxService_ForwardUserTimeline_Handler,
		},
		{
			MethodName: "ForwardHomeTimeline",
			Handler:    _NginxService_ForwardHomeTimeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nginx.proto",
}
