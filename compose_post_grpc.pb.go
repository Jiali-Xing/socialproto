// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: compose_post.proto

package socialproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComposePostClient is the client API for ComposePost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComposePostClient interface {
	ComposePost(ctx context.Context, in *ComposePostRequest, opts ...grpc.CallOption) (*ComposePostResponse, error)
	ComposePostMulti(ctx context.Context, in *ComposePostMultiRequest, opts ...grpc.CallOption) (*ComposePostMultiResponse, error)
}

type composePostClient struct {
	cc grpc.ClientConnInterface
}

func NewComposePostClient(cc grpc.ClientConnInterface) ComposePostClient {
	return &composePostClient{cc}
}

func (c *composePostClient) ComposePost(ctx context.Context, in *ComposePostRequest, opts ...grpc.CallOption) (*ComposePostResponse, error) {
	out := new(ComposePostResponse)
	err := c.cc.Invoke(ctx, "/socialproto.ComposePost/ComposePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *composePostClient) ComposePostMulti(ctx context.Context, in *ComposePostMultiRequest, opts ...grpc.CallOption) (*ComposePostMultiResponse, error) {
	out := new(ComposePostMultiResponse)
	err := c.cc.Invoke(ctx, "/socialproto.ComposePost/ComposePostMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComposePostServer is the server API for ComposePost service.
// All implementations must embed UnimplementedComposePostServer
// for forward compatibility
type ComposePostServer interface {
	ComposePost(context.Context, *ComposePostRequest) (*ComposePostResponse, error)
	ComposePostMulti(context.Context, *ComposePostMultiRequest) (*ComposePostMultiResponse, error)
	mustEmbedUnimplementedComposePostServer()
}

// UnimplementedComposePostServer must be embedded to have forward compatible implementations.
type UnimplementedComposePostServer struct {
}

func (UnimplementedComposePostServer) ComposePost(context.Context, *ComposePostRequest) (*ComposePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposePost not implemented")
}
func (UnimplementedComposePostServer) ComposePostMulti(context.Context, *ComposePostMultiRequest) (*ComposePostMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposePostMulti not implemented")
}
func (UnimplementedComposePostServer) mustEmbedUnimplementedComposePostServer() {}

// UnsafeComposePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComposePostServer will
// result in compilation errors.
type UnsafeComposePostServer interface {
	mustEmbedUnimplementedComposePostServer()
}

func RegisterComposePostServer(s grpc.ServiceRegistrar, srv ComposePostServer) {
	s.RegisterService(&ComposePost_ServiceDesc, srv)
}

func _ComposePost_ComposePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposePostServer).ComposePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.ComposePost/ComposePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposePostServer).ComposePost(ctx, req.(*ComposePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComposePost_ComposePostMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposePostMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposePostServer).ComposePostMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialproto.ComposePost/ComposePostMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposePostServer).ComposePostMulti(ctx, req.(*ComposePostMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComposePost_ServiceDesc is the grpc.ServiceDesc for ComposePost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComposePost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "socialproto.ComposePost",
	HandlerType: (*ComposePostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComposePost",
			Handler:    _ComposePost_ComposePost_Handler,
		},
		{
			MethodName: "ComposePostMulti",
			Handler:    _ComposePost_ComposePostMulti_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compose_post.proto",
}
